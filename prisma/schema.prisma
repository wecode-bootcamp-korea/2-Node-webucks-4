// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  name      String    @db.VarChar(100)
  Product   Product[]

  @@map("categories")
}

model Product {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     Int              @map("category_id")
  koreanName     String           @map("korean_name") @db.VarChar(100)
  englishName    String           @map("english_name") @db.VarChar(100)
  Description    Description?
  Image          Image?
  Nutrition      Nutrition[]
  ProductAllergy ProductAllergy[]
  Comment        Comment[]
  ProductLike    ProductLike[]

  @@map("products")
}

model Description {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  content   String   @db.VarChar(3000)
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @map("product_id")

  @@map("description")
}

model Image {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @map("product_id")
  imageUrl  String   @map("image_url")

  @@map("images")
}

model Allergy {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  name           String           @map("name")
  ProductAllergy ProductAllergy[]

  @@map("allergies")
}

model ProductAllergy {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  allergyId Int     @map("allergy_id")
  product   Product @relation(fields: [productId], references: [id])
  allergy   Allergy @relation(fields: [allergyId], references: [id])

  @@map("product_allergies")
}

model Nutrition {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  product     Product      @relation(fields: [productId], references: [id])
  productId   Int          @map("product_id")
  kcal        Float        @db.Double
  fat         Float        @db.Double
  protein     Float        @db.Double
  natrium     Float        @db.Double
  sugar       Float        @db.Double
  caffeine    Float        @db.Double
  ServingSize ServingSize?

  @@map("nutritions")
}

model ServingSize {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  name        String    @db.VarChar(100)
  ml          Float     @db.Double
  floz        Int
  nutrition   Nutrition @relation(fields: [nutritionId], references: [id])
  nutritionId Int       @map("nutrition_id")

  @@map("serving_size")
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  name         String?
  email        String        @unique
  password     String
  address      String?
  phoneNumber  String?       @map("phone_number")
  policyAgreed Boolean       @default(true) @map("policy_agreed")
  ProductLike  ProductLike[]
  Comment      Comment[]
  CommentLike  CommentLike[]

  @@map("users")
}

model Comment {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at")
  content     String
  userId      Int?          @map("user_id")
  productId   Int?          @map("product_id")
  product     Product?      @relation(fields: [productId], references: [id])
  user        User?         @relation(fields: [userId], references: [id])
  CommentLike CommentLike[]

  @@map("comments")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("users_id")
  commentId Int?     @map("comments_id")
  user      User?    @relation(fields: [userId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
  @@map("comments_likes")
}

model ProductLike {
  id        Int      @id @default(autoincrement())
  userId    Int?     @map("users_id")
  productId Int?     @map("coffees_id")
  user      User?    @relation(fields: [userId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("coffees_likes")
}
