// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model Category {
  id        Int       @id @default(autoincrement())
  category  String    @map("name")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  isDeleted Boolean   @default(false) @map("is_deleted")
  Product   Product[]

  @@map("categories")
}

model Product {
  id             Int              @id @default(autoincrement())
  koreanName     String           @map("korean_name")
  englishName    String           @map("english_name")
  description    String
  isNew          Boolean          @default(false) @map("is_new")
  categoryId     Int              @map("category_id")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  isDeleted      Boolean          @default(false) @map("is_deleted")
  Category       Category         @relation(fields: [categoryId], references: [id])
  ProductImage   ProductImage[]
  ProductAllergy ProductAllergy[]
  Nutrition      Nutrition[]

  ProductLike    ProductLike[]
  ProductComment ProductComment[]
  @@map("products")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String   @map("image_url") @db.VarChar(2000)
  productId Int      @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  isDeleted Boolean  @default(false) @map("is_deleted")
  Product   Product  @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model Allergy {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")
  isDeleted      Boolean          @default(false) @map("is_deleted")
  ProductAllergy ProductAllergy[]

  @@map("allergies")
}

model ProductAllergy {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  allergyId Int     @map("allergy_id")
  Product   Product @relation(fields: [productId], references: [id])
  Allergy   Allergy @relation(fields: [allergyId], references: [id])

  @@map("product_allergies")
}

model Nutrition {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  calories  Float
  fat       Float
  protein   Float
  natrium   Float
  sugar     Float
  caffeine  Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  isDeleted Boolean  @default(false) @map("is_deleted")
  Product   Product  @relation(fields: [productId], references: [id])

  @@map("nutritions")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  username     String?
  address      String?
  phoneNumber  String?  @map("phone_number")
  policyAgreed Boolean  @default(true) @map("policy_agreed")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  isDeleted    Boolean  @default(false) @map("is_deleted")

  ProductLike    ProductLike[]
  ProductComment ProductComment[]
  @@map("users")
}

model ProductLike {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  isDeleted Boolean  @default(false) @map("is_deleted")
  User      User     @relation(fields: [userId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId], name: "ProductLike_userId_productId_unique_constraint")
  @@map("product_likes")
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  isDeleted Boolean  @default(false) @map("is_deleted")
  User      User     @relation(fields: [userId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])

  @@map("product_comments")
}
